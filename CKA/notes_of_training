# This file records the kubernetes commands in CKA training course.

/************************************ Practice with pods ************************************/

1. Get running pods numbers
   kubectl get pods

2. Create a new pod with the nginx image
   kubectl run nginx --image=nginx      // kubectl run POD_NAME --image=POD_IMAGE_NAME
   
   kubectl run nginx --image=nginx --dry-run=client -o yaml > pod.yaml  // one can dry run to check pod details in yaml file
   kubectl apply -f pod.yaml
   
3. What is the image used to create the new pods?
   kubectl describe pod POD_NAMES | grep -i image
   
4. Which nodes are these pods placed on?
   kubectl get pods -o wide    // There is a column named 'node'
   
5. How many containers are part of the pod 'webapp'?
   kubectl get pods webapp
   
6. What is the state of container 'agentx' in the pod 'webapp'?
   kubectl describe pod webapp  // then to check state under each container
   
7. Delete pod webapp
   kubectl delete pod webapp
   
8. Change the image name for a pod
   kubectl edit pod nginx        // find the image name and edit it.


/************************************ Practice with ReplicaSets ************************************/

9. Get replicasets
   kubectl get replicasets.apps
   
controlplane ~ ✖ kubectl get replicasets.apps
NAME              DESIRED   CURRENT   READY   AGE
new-replica-set   4         4         0       36s

We can see that the DESIRED pods numbers in the replica. Replica will always make sure the DESIRED number of pods running. How many are deleted, then how many will be created automatically.

10. Get the image used to create pods in the replica.
    kubectl describe replicasets.apps RELICA_NAME
    
11. Correct replica apiVersion:
    controlplane ~ ➜  kubectl apply -f replicaset-definition-1.yaml 
error: unable to recognize "replicaset-definition-1.yaml": no matches for kind "ReplicaSet" in version "v1"

   -> apps/v1
   
12. Delete ReplicaSet
    kubectl delete replicasets.apps REPLICA_NAME
    
13. Scale (up/down) replica
    kubectl scale replicaset --replicas=5 REPLICA_SET_NAME    // up from 4 to 5
    kubectl scale replicaset --replicas=2 REPLICA_SET_NAME    // dwon from 5 to 2



/************************************ Practice with Deployment ************************************/


14. How many deployments
    kubectl get deployments.apps
    
15. Create deployment:
    Name: httpd-frontend;
Replicas: 3;
Image: httpd:2.4-alpine


    kubectl create deployment httpd-frontend --image=httpd:2.4-alpine
    
    kubectl scale deployment --replicas=3 httpd-frontend
    
    

/************************************ Practice with Namespace ************************************/

16.  How many Namespace
     kubectl get ns --no-headers | wc -l
     
17. How many pods exist in the namespace 'research'?
    kubectl get pods -n research --no-headers
    
18. Create a POD in the 'finance' namespace. (Name: redis, Image Name: redis)
    1) kubectl run redis --image=redis --dry-run=client -o yaml > pod.yaml
    2) vi pod.yaml
       apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: redis
  name: redis
  namespace: finance    #add this line 
spec:
  containers:
  - image: redis
    name: redis
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

    3) kubectl apply -f pod.yaml
    
19. Which namespace has the 'blue' pod in it?
    kubectl get pods --all-namespaces | grep blue
    
 
 /************************************ Practice with Service ************************************/
 
 20. How many Services exist on the system?
     kubectl get services
     
 21. What is the targetPort configured on the kubernetes service?
     controlplane ~ ✖ kubectl describe service kubernetes
Name:              kubernetes
Namespace:         default
Labels:            component=apiserver
                   provider=kubernetes
Annotations:       <none>
Selector:          <none>
Type:              ClusterIP
IP Family Policy:  SingleStack
IP Families:       IPv4
IP:                10.43.0.1
IPs:               10.43.0.1
Port:              https  443/TCP
TargetPort:        6443/TCP                # Answer is 6443
Endpoints:         10.6.235.3:6443
Session Affinity:  None
Events:            <none>

22. How many Deployments exist on the system now?
    kubectl get deployments.apps
    
23. What is the image used to create the pods in the deployment?
    kubectl describe deployments.apps simple-webapp-deployment
    
24. Create a new service to access the web application using the service-definition-1.yaml file
Name: webapp-service
Type: NodePort
targetPort: 8080
port: 8080
nodePort: 30080
selector: simple-webapp

    kubectl expose deployment simple-webapp-deployment --name=webapp-service --target-port=8080 --type=NodePort --port=8080 --dry-run=client -o yaml > svc.yaml
    kubectl apply -f svc.yaml


 /************************************ Practice with Imperative Commands ************************************/
 
 25. Deploy a pod named nginx-pod using the nginx:alpine image. Use imperative commands only.
     kubectl run nginx-pod --image=nginx:alpine
     
     Deploy a redis pod using the redis:alpine image with the labels set to tier=db.
     kubectl run redis --image=redis:alpine --labels=tier=db
         
 26. Create a service redis-service to expose the redis application within the cluster on port 6379.
     kubectl expose pod redis --name redis-service --port 6379 --target-port 6379
     
 27. Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas.
     controlplane ~ ➜  kubectl create deployment webapp --image=kodekloud/webapp-color
     deployment.apps/webapp created

     controlplane ~ ➜  kubectl scale deployment --replicas=3 webapp
     deployment.apps/webapp scaled
     
28.  Create a new pod called custom-nginx using the nginx image and expose it on container port 8080.
     kubectl run custom-nginx --image=nginx --port 8080  
     
29. Create a new deployment called redis-deploy in the dev-ns namespace with the redis image. It should have 2 replicas.
     kubectl create deployment redis-deploy --image=redis --namespace=dev-ns --dry-run=client -o yaml > redis.yaml
     kubectl apply -f redis.yaml
     
30. Create a pod called httpd using the image httpd:alpine in the default namespace. Next, create a service of type ClusterIP by the same name (httpd). The target port for the service should be 80.
    kubectl run httpd --image=httpd:alpine --port 80 --expose --dry-run=client -o yaml
    
 
/************************************ Practice with Manually schedule ************************************/
31. Manually schedule the pod on node01. Delete and recreate the POD if necessary.
    kubectl delete pod nginx
    
    root@controlplane:~# vi nginx.yaml 
root@controlplane:~# cat nginx.yaml 
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  nodeName: node01     #add nodeName to pod yaml file
  containers:
  -  image: nginx
     name: nginx
     
     
     kubectl apply -f nginx.yaml
     
     
 
 /************************************ Practice with Labels and Selectors ************************************/    
 32. We have deployed a number of PODs. They are labelled with tier, env and bu. How many PODs exist in the dev environment?
     kubectl get pods -l env=dev
     
     How many PODs are in the finance business unit (bu)?
     kubectl get pods -l bu=finance
     
 33. How many objects are in the prod environment including PODs, ReplicaSets and any other objects?
     kubectl get all -l env=prod --no-headers | wc -l
     
     Identify the POD which is part of the prod environment, the finance BU and of frontend tier?
     kubectl get pods -l env=prod,bu=finance,tier=frontend
     
     
     
